classdef MemoryTypesTest < matlab.unittest.TestCase
     methods (Test)
         function test_get_value(testCase)
             cellfun(@test_single, testCase.get_memory_constructor_list());
             function test_single(in_memory_constructor)
                 memory = in_memory_constructor();
                 for cur_pos = -10:1:10
                     testCase.assertEqual(...
                         memory.get_value(cur_pos), ...
                         cast(0, memory.get_value_type()));
                 end
             end
         end
         function test_set_get_value(testCase)
             rng(1);
             cellfun(...
                 @test_single_memory, ...
                 testCase.get_memory_constructor_list());
             function test_single_memory(in_memory_constructor)
                 memory = in_memory_constructor();
                 min_pos = -200;
                 max_pos = 200;
                 test_data = populate_memory(memory, min_pos, max_pos, 200);
                 arrayfun(...
                     @(s) check_single_position(testCase, s, memory, test_data), ...
                     min_pos:1:max_pos);
             end
         end
         function test_change_value(testCase)
             rng(2);
             cellfun(...
                 @test_single_memory, ...
                 testCase.get_memory_constructor_list());
             function test_single_memory(in_memory_constructor)
                 memory = in_memory_constructor();
                 min_pos = -20;
                 max_pos = -min_pos;
                 test_data = populate_memory(memory, min_pos, max_pos, 30);
                 cellfun(@proc_single_position, test_data.keys());
                 arrayfun(...
                     @(s) check_single_position(testCase, s, memory, test_data), ...
                     min_pos:1:max_pos);
                 function proc_single_position(in_position)
                     for change_num = 1:1:20
                         value_change = ...
                             cast(randi([-10, 10]), memory.get_value_type());
                         BFMachinePac.MemoryTypes.change_value(...
                             memory, in_position, value_change);
                         test_data(in_position) = ...
                             cast(test_data(in_position)+value_change, ...
                                  memory.get_value_type());
                         check_single_position(...
                             testCase, in_position, memory, test_data);
                     end
                 end
             end
         end
     end

     methods
         function res = get_memory_constructor_list(~)
             res = ...
                 {@() BFMachinePac.MemoryTypes.VectorMemory(), ...
                  @() BFMachinePac.MemoryTypes.VectorMemory('default_value', int8(0)), ...
                  @() BFMachinePac.MemoryTypes.VectorMemory('default_value', char(0)), ...
                  @() BFMachinePac.MemoryTypes.MapMemory(), ...
                  @() BFMachinePac.MemoryTypes.MapMemory(...
                      'remove_default_values', false), ...
                  @() BFMachinePac.MemoryTypes.MapMemory(...
                      'position_type', 'double', ...
                      'default_value', char(0), ...
                      'remove_default_values', true), ...
                  @() BFMachinePac.MemoryTypes.MapMemory(...
                      'position_type', 'double', ...
                      'default_value', char(0), ...
                      'remove_default_values', false);
                 };
         end
         function check_single_position(...
                     testCase, in_position, in_memory, in_test_data)
                 if in_test_data.isKey(in_position)
                     testCase.assertEqual(...
                         in_memory.get_value(in_position), ...
                         in_test_data(in_position));
                 else
                     testCase.assertEqual(...
                         in_memory.get_value(in_position), ...
                         in_memory.default_value);
                 end
                 testCase.assertTrue(...
                     isa(in_memory.get_value(in_position), ...
                         in_memory.get_value_type()));
         end
     end
end

 function res = populate_memory(...
         memory, in_min_pos, in_max_pos, in_size)
     res = ...
         containers.Map('KeyType', ...
                        memory.get_position_type(), ...
                        'ValueType', ...
                        memory.get_value_type());
     for i = 1:1:in_size
         cur_position = ...
             cast(randi([in_min_pos, in_max_pos]), ...
             memory.get_position_type());
         cur_value = cast(randi(200), memory.get_value_type());
         memory.set_value(cur_position, cur_value);
         res(cur_position) = cur_value;
     end
 end
