classdef MemoryTypesTest < matlab.unittest.TestCase
     methods (Test)
         function test_get_value(testCase)
             cellfun(@test_single, testCase.get_memory_list());
             function test_single(in_memory)
                 for cur_pos = -10:1:10
                     testCase.assertEqual(...
                         in_memory.get_value(cur_pos), ...
                         cast(0, in_memory.get_value_type()));
                 end
             end
         end
         function test_set_get_value(testCase)
             rng(1);
             cellfun(@test_single_memory, testCase.get_memory_list());
             function test_single_memory(in_memory)
                 test_data = ...
                     containers.Map('KeyType', ...
                                    in_memory.get_position_type(), ...
                                    'ValueType', ...
                                    in_memory.get_value_type());
                 test_size = 8*100;
                 for value_num = 1:1:test_size
                     cur_position = ...
                         cast(randi(test_size/4)-test_size/8, ...
                         in_memory.get_position_type());
                     cur_value = ...
                         cast(randi(200), in_memory.get_value_type());
                     in_memory.set_value(cur_position, cur_value);
                     test_data(cur_position) = cur_value;
                 end
                 cellfun(@check_single_position, test_data.keys());
                 function check_single_position(in_position)
                     testCase.assertEqual(...
                         in_memory.get_value(in_position), ...
                         test_data(in_position));
                     testCase.assertTrue(...
                         isa(in_memory.get_value(in_position), ...
                             in_memory.get_value_type()));
                 end
             end
         end
         function test_change_value(testCase)
             rng(2);
             cellfun(@test_single_memory, testCase.get_memory_list());
             function test_single_memory(in_memory)
                 test_data = ...
                     containers.Map('KeyType', ...
                                    in_memory.get_position_type(), ...
                                    'ValueType', ...
                                    in_memory.get_value_type());
                 test_size = 8*10;
                 for value_num = 1:1:test_size
                     cur_position = ...
                         cast(randi(test_size/4)-test_size/8, ...
                         in_memory.get_position_type());
                     cur_value = ...
                         cast(randi(200), in_memory.get_value_type());
                     in_memory.set_value(cur_position, cur_value);
                     test_data(cur_position) = cur_value;
                 end
                 cellfun(@proc_single_position, test_data.keys());
                 function proc_single_position(in_position)
                     for change_num = 1:1:20
                         value_change = cast(randi(20)-10, in_memory.get_value_type());  
                         BFMachinePac.MemoryTypes.change_value(...
                             in_memory, in_position, value_change);
                         test_data(in_position) = ...
                             cast(test_data(in_position)+value_change, ...
                                  in_memory.get_value_type());
                         check_single_position(in_position);
                     end
                 end
                 function check_single_position(in_position)
                     testCase.assertEqual(...
                         in_memory.get_value(in_position), ...
                         test_data(in_position));
                     testCase.assertTrue(...
                         isa(in_memory.get_value(in_position), ...
                             in_memory.get_value_type()));
                 end
             end
         end
     end

     methods
         function res = get_memory_list(~)
             res = ...
                 {BFMachinePac.MemoryTypes.VectorMemory(int8(0)), ...
                  BFMachinePac.MemoryTypes.VectorMemory(0), ...
                  BFMachinePac.MemoryTypes.VectorMemory(char(0)), ...
                  BFMachinePac.MemoryTypes.MapMemory('double', int16(0), false), ...
                  BFMachinePac.MemoryTypes.MapMemory('double', int16(0), true), ...
                  BFMachinePac.MemoryTypes.MapMemory('double', char(0), true), ...
                  BFMachinePac.MemoryTypes.MapMemory('double', 0, true), ...
                 };
         end
     end
end