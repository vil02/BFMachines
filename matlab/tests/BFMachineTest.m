classdef BFMachineTest < matlab.unittest.TestCase
    methods (Test)
        function test_plus(testCase)
            bf_code = ',>,<[->+<]>.';
            cellfun(...
                @check_single_type, testCase.get_bfm_constructor_list());
            function check_single_type(in_bfm_constructor)
                testCase.check_all_2d(...
                    bf_code, in_bfm_constructor, @sum, 10); 
            end
        end
        function test_times(testCase)
            bf_code = ',>,<[>[->+>+<<]>>[-<<+>>]<[->>+<<]<<-]>>>>.';
            cellfun(...
                @check_single_type, testCase.get_bfm_constructor_list());
            function check_single_type(in_bfm_constructor)
                testCase.check_all_2d(...
                    bf_code, in_bfm_constructor, @prod, 10); 
            end
        end
%         function test_hello_world(testCase)
%             cellfun(...
%                 @check_single_type, ...
%                 testCase.get_char_bfm_constructor_list());
%             function check_single_type(in_char_bfm_construction)
%                 hello_bf = ...
%                    ['++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>' ...
%                     '---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.'];
%                 bfm = in_char_bfm_construction();
%                 input_stream = BFMachinePac.InputStream([]);
%                 output_stream = BFMachinePac.OutputStream();
%                 bfm.execute(hello_bf, input_stream, output_stream);
%                 testCase.asserEqual(...
%                     output_stream.get_data(), ...
%                     sprintf('%s\n', 'Hello World!'));
%             end
%         end
    end
     
    methods
        function res = get_bfm_constructor_list(~)
            res = ...
                {@() BFMachinePac.BFMachine(), ...
                 @() BFMachinePac.BFMachine(...
                     'memory', BFMachinePac.MemoryTypes.VectorMemory(...
                         'extend_data_fun', ...
                         @BFMachinePac.MemoryTypes.extend_by_doubling)), ...
                 @() BFMachinePac.BFMachine(...
                     'memory', BFMachinePac.MemoryTypes.MapMemory()), ...
                 @() BFMachinePac.BFMachine(...
                     'memory', BFMachinePac.MemoryTypes.MapMemory(...
                         'remove_default_values', false)), ...
                };
       end
       function res = get_char_bfm_constructor_list(~)
           res = ...
               {@() BFMachinePac.BFMachine(...
                    'memory', BFMachinePac.MemoryTypes.VectorMemory(...
                        'default_value', char(0))), ...
               };
        end
        function check_all_2d(...
                testCase, bf_code, bfm_constructor, ...
                result_fun, max_val)
            for val_a = 0:1:max_val
                for val_b = 0:1:max_val
                    testCase.check_single_computation(...
                        [val_a, val_b], ...
                        bf_code, bfm_constructor, result_fun); 
                end
            end
        end
        function check_single_computation(...
                testCase, input_data, bf_code, ...
                bfm_constructor, result_fun)
            input_stream = BFMachinePac.InputStream(input_data);
            output_stream = BFMachinePac.OutputStream();
            bfm = bfm_constructor();
            bfm.execute(bf_code, input_stream, output_stream);
            res_data = output_stream.get_data();
            testCase.assertEqual(size(res_data), [1, 1]);
            testCase.assertEqual(res_data(1), result_fun(input_data));             
        end
    end
end
